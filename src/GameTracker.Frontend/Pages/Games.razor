@page "/games";

<PageTitle>Games</PageTitle>

@using GameTracker.Frontend.Models;
@using GameTracker.Frontend.Pages.Components;
@using GameTracker.Interfaces;
@using GameTracker.Core;
@using GameTracker.Models;
@using GameTracker.Models.Enums;

@inject NavigationManager NavigationManager;
@inject PreloadService PreloadService;
@inject ToastService ToastService;

@inject IGameLibraryManager GameLibraryManager;

@if (!isAuthenticated)
{
    <p><em>Unauthorized.</em></p>
}
else if (isInitializing)
{
}
else if (GameLibraryManager.Games == null || !GameLibraryManager.Games.Any())
{
    <p><em>No games loaded. Please configure a game provider.</em></p>
}
else
{
    <table class="table">
        <tr>
            <td>
                <Accordion>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Search" Class="me-1" />Title Search
                        </TitleTemplate>
                        <Content>
                            <AutoComplete @bind-Value="filterProperties.Name"
                                          TItem="Game"
                                          DataProvider="GameFilterProvider"
                                          PropertyName="Title"
                                          Placeholder="Search for a game title..."
                                          OnChanged="(Game game) => OnAutoComplete(game)" />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Calendar" Class="me-1" /> Released Since...
                        </TitleTemplate>
                        <Content>
                            <DateInput TValue="DateOnly?" @bind-Value="@ReleaseDateFilter" Placeholder="Released since..." />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Hourglass" Class="me-1" /> Time Played...
                        </TitleTemplate>
                        <Content>
                            <NumberInput TValue="int?" @bind-Value="@UpperHoursFilter" Placeholder="Upper bound (hours)" />
                            <NumberInput TValue="int?" @bind-Value="@LowerHoursFilter" Placeholder="Lower bound (hours)" />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Star" Class="me-1" /> Minimum Review Score...
                        </TitleTemplate>
                        <Content>
                            <NumberInput TValue="int?" @bind-Value="@MinimumReviewScoreFilter" Placeholder="Minimum score (%)" />
                        </Content>
                    </AccordionItem>
                </Accordion>
            </td>
            <td>
                <Accordion>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.CodeSlash" Class="me-1"/> Studio Search...
                        </TitleTemplate>
                        <Content>
                            <AutoComplete @bind-Value="filterProperties.Studio"
                                          TItem="Studio"
                                          DataProvider="StudioFilterProvider"
                                          PropertyName="Name"
                                          Placeholder="Search for a development studio..."
                                          OnChanged="(Studio studio) => OnAutoComplete(studio)" />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Building" Class="me-1" /> Publisher Search...
                        </TitleTemplate>
                        <Content>
                            <AutoComplete @bind-Value="filterProperties.Publisher"
                                          TItem="Publisher"
                                          DataProvider="PublisherFilterProvider"
                                          PropertyName="Name"
                                          Placeholder="Search for a publisher..."
                                          OnChanged="(Publisher publisher) => OnAutoComplete(publisher)" />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Clock" Class="me-1" /> Last Played...
                        </TitleTemplate>
                        <Content>
                            <DateInput TValue="DateTime?" @bind-Value="@LastPlayedFilter" Placeholder="Not played after..." />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Controller" Class="me-1" /> Genre Search...
                        </TitleTemplate>
                        <Content>
                            <AutoComplete @bind-Value="filterProperties.Genre"
                                          TItem="FilterableGenre"
                                          DataProvider="GenreFilterProvider"
                                          PropertyName="Name"
                                          Placeholder="Search for a genre..."
                                          OnChanged="(FilterableGenre genre) => OnAutoComplete(genre)" />
                        </Content>
                    </AccordionItem>
                </Accordion>
            </td>
        </tr>
    </table>

    <Grid TItem="GameRow"
          Class="table table-hover table-bordered table-striped"
          Data="GameRows"
          AllowFiltering="false"
          AllowPaging="true"          
          PageSize="4"
          PageSizeSelectorVisible="true"
          PageSizeSelectorItems="@(new int[] { 4,8,16 })"
          PaginationItemsTextFormat="{0} - {1} of {2} rows"          
          Responsive="true">
        <GridColumn TItem="GameRow" PropertyName="Game1" Filterable="false" Sortable="false">
            <ChildContent>
                <GameCell Game="@context.Game1" />
            </ChildContent>
        </GridColumn>
        <GridColumn TItem="GameRow" PropertyName="Game2" Filterable="false" Sortable="false">
            <ChildContent>
                <GameCell Game="@context.Game2" />
            </ChildContent>
        </GridColumn>
        <GridColumn TItem="GameRow" PropertyName="Game3" Filterable="false" Sortable="false">
            <ChildContent>
                <GameCell Game="@context.Game3" />
            </ChildContent>
        </GridColumn>
    </Grid>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private FilterProperties filterProperties = new();
    private bool isAuthenticated;
    private bool isInitializing;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;
        var userName = authState?.User?.Identity?.Name;

        if (!isAuthenticated || string.IsNullOrEmpty(userName))
        {
            return;
        }

        PreloadService.Show();
        await GameLibraryManager.InitialiseProviders(userName);
        PreloadService.Hide();
    }

    private async Task<AutoCompleteDataProviderResult<Game>> GameFilterProvider(AutoCompleteDataProviderRequest<Game> request)
    {
        return await Task.FromResult(request.ApplyTo(GameLibraryManager.Games));
    }

    private async Task<AutoCompleteDataProviderResult<FilterableGenre>> GenreFilterProvider(AutoCompleteDataProviderRequest<FilterableGenre> request)
    {
        var genres = GameLibraryManager.Games.SelectMany(g => g.Genres)
            .Distinct()
            .Select(g => new FilterableGenre { Name = g.ToString() })
            .ToList();

        return await Task.FromResult(new AutoCompleteDataProviderResult<FilterableGenre>
        {
            Data = genres,
            TotalCount = genres.Count()
        });
    }

    private async Task<AutoCompleteDataProviderResult<Publisher>> PublisherFilterProvider(AutoCompleteDataProviderRequest<Publisher> request)
    {
        var publishers = GameLibraryManager.Games.Where(g => g.Publisher != null).Select(g => g.Publisher).DistinctBy(p => p.Name);
        return await Task.FromResult(new AutoCompleteDataProviderResult<Publisher>
        {
            Data = publishers,
            TotalCount = publishers.Count()
        });
    }

    private async Task<AutoCompleteDataProviderResult<Studio>> StudioFilterProvider(AutoCompleteDataProviderRequest<Studio> request)
    {
        var studios = GameLibraryManager.Games.Where(g => g.Studio != null).Select(g => g.Studio).DistinctBy(p => p.Name);
        return await Task.FromResult(new AutoCompleteDataProviderResult<Studio>
        {
            Data = studios,
            TotalCount = studios.Count()
        });
    }

    private List<Game> FilteredGames
    {
        get
        {
            var filteredGames = new List<Game>(GameLibraryManager.Games);

            if (!string.IsNullOrEmpty(filterProperties.Name))
            {
                filteredGames = filteredGames.Where(g => g.Title.Contains(filterProperties.Name)).ToList();
            }

            if (!string.IsNullOrEmpty(filterProperties.Studio))
            {
                filteredGames = filteredGames.Where(g => g.StudioName != null && g.StudioName.Contains(filterProperties.Studio)).ToList();
            }

            if (!string.IsNullOrEmpty(filterProperties.Publisher))
            {
                filteredGames = filteredGames.Where(g => g.PublisherName != null && g.PublisherName.Contains(filterProperties.Publisher)).ToList();
            }

            if (!string.IsNullOrEmpty(filterProperties.Genre))
            {
                filteredGames = filteredGames.Where(g => g.Genres != null && g.Genres.Any(g => g.ToString() == filterProperties.Genre)).ToList();
            }

            if (filterProperties.ReleaseDate != null)
            {
                var filterDateTime = new DateTime(filterProperties.ReleaseDate.Value.Year, filterProperties.ReleaseDate.Value.Month, filterProperties.ReleaseDate.Value.Day);
                filteredGames = filteredGames.Where(g => g.ReleaseDate.HasValue && g.ReleaseDate.Value >= filterDateTime).ToList();
            }

            if (filterProperties.LastPlayed != null)
            {
                filteredGames = filteredGames.Where(g => g.LastPlayed.HasValue && g.LastPlayed.Value <= filterProperties.LastPlayed).ToList();
            }

            if (filterProperties.LowerHours != null)
            {
                var lower = TimeSpan.FromHours(filterProperties.LowerHours.Value);                
                filteredGames = filteredGames.Where(g => g.Playtime != null && g.Playtime >= lower).ToList();
            }

            if (filterProperties.UpperHours != null)
            {
                var upper = TimeSpan.FromHours(filterProperties.UpperHours.Value);
                filteredGames = FilteredGames.Where(g => g.Playtime != null && g.Playtime <= upper).ToList();
            }

            if (filterProperties.MinimumReviewScore != null)
            {
                filteredGames = filteredGames.Where(g => g.AverageCriticalReview.HasValue && g.AverageCriticalReview > filterProperties.MinimumReviewScore).ToList();
            }

            return filteredGames;
        }
    }

    private List<GameRow> GameRows
    {
        get
        {
            return FilteredGames.Chunk(3).Select(c => new GameRow
                {
                    Game1 = c[0],
                    Game2 = c.Length >= 2 ? c[1] : null,
                    Game3 = c.Length >= 3 ? c[2] : null
                }).ToList();
        }
    }

    private DateOnly? ReleaseDateFilter
    {
        get => filterProperties.ReleaseDate;
        set
        {
            filterProperties.ReleaseDate = value;
            this.StateHasChanged();
        }
    }

    private DateTime? LastPlayedFilter
    {
        get => filterProperties.LastPlayed;
        set
        {
            filterProperties.LastPlayed = value;
            this.StateHasChanged();
        }
    }

    private int? LowerHoursFilter
    {
        get => filterProperties.LowerHours;
        set
        {
            filterProperties.LowerHours = value;
            this.StateHasChanged();
        }
    }

    private int? UpperHoursFilter
    {
        get => filterProperties.UpperHours;
        set
        {
            filterProperties.UpperHours = value;
            this.StateHasChanged();
        }
    }

    private int? MinimumReviewScoreFilter
    {
        get => filterProperties.MinimumReviewScore;
        set
        {
            filterProperties.MinimumReviewScore = value;
            this.StateHasChanged();
        }
    }

    private void OnAutoComplete(object state)
    {
        if (state != null)
        {
            this.StateHasChanged();
        }        
    }
}