@page "/games";

<PageTitle>Games</PageTitle>

@using GameTracker.Frontend.Pages.Components;
@using GameTracker.Interfaces;
@using GameTracker.Core;
@using GameTracker.Models;
@using MathNet.Numerics.Statistics;

@inject IProviderFactory ProviderFactory;
@inject NavigationManager NavigationManager;
@inject ToastService ToastService;

@if (games == null || !games.Any())
{
    <p><em>No games loaded. Please configure a game provider.</em></p>
}
else
{
    <Modal @ref="modal" IsVerticallyCentered=true Size="ModalSize.Large" />
    <EditForm Model="@gridState">
        <table class="table">
            <tbody>
                @foreach (var gameRow in games.Skip((gridState.CurrentPage - 1) * gridState.ItemsPerPage).Take(gridState.ItemsPerPage).Chunk(gridState.ItemsPerRow))
                {
                    <tr>
                        @foreach (var game in gameRow)
                        {
                            <td>
                                <div>
                                    <img height="215" width="460" src="@game.Image" alt="@game.Title" @onclick="@(e => OnShowGameModalClick(game))" />
                                </div>
                            </td>
                        }
                    </tr>
                }
                <tr>
                    @for (int i = 1; i <= gridState.ItemsPerRow; i++)
                    {
                        @if (i == 1)
                        {
                            <td>
                                <Button Color="ButtonColor.Secondary" @ref="previousButton" @onclick="PreviousPage">
                                    <Icon Name="IconName.CaretLeftFill" />
                                </Button>
                            </td>
                        }
                        else if (i == GetMedian(gridState.ItemsPerRow))
                        {
                            <td>
                                <div>
                                    Page: @gridState.CurrentPage / @PageCount()
                                </div>
                                <div>
                                    <label>Items per Page</label>
                                    <InputSelect @bind-Value="@gridState.ItemsPerPage">
                                        <option value="6">6</option>
                                        <option value="12">12</option>
                                        <option value="24">24</option>
                                        <option value="48">48</option>
                                    </InputSelect>
                                </div>
                            </td>
                        }
                        else if (i == gridState.ItemsPerRow)
                        {
                            <td>
                                <Button Color="ButtonColor.Secondary" @ref="nextButton" @onclick="NextPage">
                                    <Icon Name="IconName.CaretRightFill"/>
                                </Button>
                            </td>
                        }
                        else
                        {
                            <td />
                        }
                    }
                </tr>
            </tbody>
        </table>
    </EditForm>
}

@code {

    private List<Game> games;
    private Modal modal;

    private Button previousButton;
    private Button nextButton;

    private Models.GridState gridState = new()
        {
            CurrentPage = 1,
            ItemsPerPage = 6,
            ItemsPerRow = 3
        };

    protected override async Task OnInitializedAsync()
    {
        games = ProviderFactory.LoadProviders()
            .ToArray()
            .SelectMany(p => p.Games)
            .ToList();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        previousButton?.HideLoading();
        nextButton?.HideLoading();
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnShowGameModalClick(Game game)
    {
        var modalParams = new Dictionary<string, object>();
        modalParams.Add("Game", game);
        await modal.ShowAsync<GameModal>(title: game.Title, parameters: modalParams);
    }

    private void NextPage()
    {
        if (gridState.CurrentPage < PageCount())
        {
            nextButton.ShowLoading("Loading...");
            gridState.CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (gridState.CurrentPage > 1)
        {
            previousButton.ShowLoading("Loading...");
            gridState.CurrentPage--;
        }
    }

    private void ResetTable()
    {
        gridState.CurrentPage = 1;
    }

    private int PageCount()
    {
        return Convert.ToInt32(Math.Ceiling((float)games.Count / (float)gridState.ItemsPerPage));
    }

    private static int GetMedian(int maxRange)
    {
        var pages = Enumerable.Range(1, maxRange).Select(i => Convert.ToDouble(i));
        return Convert.ToInt32(pages.Median());
    }
}