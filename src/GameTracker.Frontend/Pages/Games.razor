@page "/games";

<PageTitle>Games</PageTitle>

@using GameTracker.Frontend.Helpers;
@using GameTracker.Frontend.Models;
@using GameTracker.Frontend.Pages.Components;
@using GameTracker.Interfaces;
@using GameTracker.Core;
@using GameTracker.Models;
@using GameTracker.Models.Enums;

@inject NavigationManager NavigationManager;
@inject PreloadService PreloadService;
@inject ToastService ToastService;

@inject IGameLibraryManager GameLibraryManager;

@if (!_isAuthenticated)
{
    <p><em>Unauthorized.</em></p>
}
else if (_isInitializing)
{
}
else if (GameLibraryManager.Games == null || !GameLibraryManager.Games.Any())
{
    <p><em>No games loaded. Please configure a game provider.</em></p>
}
else
{
    <Modal @ref="_modal" IsVerticallyCentered=true Size="ModalSize.Large" />
    <table class="table">
        <tr>
            <td>
                <Accordion>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Search" Class="me-1" />Title Search
                        </TitleTemplate>
                        <Content>
                            <AutoComplete @bind-Value="_filterProperties.Name"
                                          TItem="Game"
                                          DataProvider="GameFilterProvider"
                                          PropertyName="Title"
                                          Placeholder="Search for a game title..."
                                          OnChanged="(Game game) => TitleFilter(game)" />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Calendar" Class="me-1" /> Released Since...
                        </TitleTemplate>
                        <Content>
                            <DateInput TValue="DateOnly?" @bind-Value="@ReleaseDateFilter" Placeholder="Released since..." />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Hourglass" Class="me-1" /> Time Played...
                        </TitleTemplate>
                        <Content>
                            <NumberInput TValue="int?" @bind-Value="@UpperHoursFilter" Placeholder="Upper bound (hours)" />
                            <NumberInput TValue="int?" @bind-Value="@LowerHoursFilter" Placeholder="Lower bound (hours)" />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Star" Class="me-1" /> Minimum Review Score...
                        </TitleTemplate>
                        <Content>
                            <NumberInput TValue="int?" @bind-Value="@MinimumReviewScoreFilter" Placeholder="Minimum score (%)" />
                        </Content>
                    </AccordionItem>
                </Accordion>
            </td>
            <td>
                <Accordion>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.CodeSlash" Class="me-1" /> Studio Search...
                        </TitleTemplate>
                        <Content>
                            <AutoComplete @bind-Value="_filterProperties.Studio"
                                          TItem="Studio"
                                          DataProvider="StudioFilterProvider"
                                          PropertyName="Name"
                                          Placeholder="Search for a development studio..."
                                          OnChanged="(Studio studio) => StudioFilter(studio)" />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Building" Class="me-1" /> Publisher Search...
                        </TitleTemplate>
                        <Content>
                            <AutoComplete @bind-Value="_filterProperties.Publisher"
                                          TItem="Publisher"
                                          DataProvider="PublisherFilterProvider"
                                          PropertyName="Name"
                                          Placeholder="Search for a publisher..."
                                          OnChanged="(Publisher publisher) => PublisherFilter(publisher)" />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Clock" Class="me-1" /> Last Played...
                        </TitleTemplate>
                        <Content>
                            <DateInput TValue="DateTime?" @bind-Value="@LastPlayedFilter" Placeholder="Not played after..." />
                        </Content>
                    </AccordionItem>
                    <AccordionItem>
                        <TitleTemplate>
                            <Icon Name="IconName.Controller" Class="me-1" /> Genre Search...
                        </TitleTemplate>
                        <Content>
                            <AutoComplete @bind-Value="_filterProperties.Genre"
                                          TItem="FilterableGenre"
                                          DataProvider="GenreFilterProvider"
                                          PropertyName="Name"
                                          Placeholder="Search for a genre..."
                                          OnChanged="(FilterableGenre genre) => GenreFilter(genre)" />
                        </Content>
                    </AccordionItem>
                </Accordion>
            </td>
        </tr>
    </table>
    <Accordion>
        <AccordionItem>
            <TitleTemplate>
                <Icon Name="IconName.SortUp" Class="me-1" /> Sort by...
            </TitleTemplate>
            <Content>
                <div>
                    <Button Color="ButtonColor.Primary" @onclick="(async () => await OrderBy(SortField.AverageReview))" Outline="true">
                        <Icon Name="@IconHelper.GetSortIcon(_fieldOrderDictionary[SortField.AverageReview], SortField.AverageReview)"/>
                        Average Review
                    </Button>
                    <Button Color="ButtonColor.Primary" @onclick="(async () => await OrderBy(SortField.LastPlayed))" Outline="true">
                        <Icon Name="@IconHelper.GetSortIcon(_fieldOrderDictionary[SortField.LastPlayed], SortField.LastPlayed)" />
                        Last Played
                    </Button>
                    <Button Color="ButtonColor.Primary" @onclick="(async () => await OrderBy(SortField.PlayTime))" Outline="true">
                        <Icon Name="@IconHelper.GetSortIcon(_fieldOrderDictionary[SortField.PlayTime], SortField.PlayTime)" />
                        Playtime
                    </Button>
                    <Button Color="ButtonColor.Primary" @onclick="(async () => await OrderBy(SortField.Publisher))" Outline="true">
                        <Icon Name="@IconHelper.GetSortIcon(_fieldOrderDictionary[SortField.Publisher], SortField.Publisher)" />
                        Publisher
                    </Button>
                    <Button Color="ButtonColor.Primary" @onclick="(async () => await OrderBy(SortField.ReleaseDate))" Outline="true">
                        <Icon Name="@IconHelper.GetSortIcon(_fieldOrderDictionary[SortField.ReleaseDate], SortField.ReleaseDate)" />
                        Release Date
                    </Button>
                    <Button Color="ButtonColor.Primary" @onclick="(async () => await OrderBy(SortField.StudioName))" Outline="true">
                        <Icon Name="@IconHelper.GetSortIcon(_fieldOrderDictionary[SortField.StudioName], SortField.StudioName)" />
                        Studio
                    </Button>
                    <Button Color="ButtonColor.Primary" @onclick="(async () => await OrderBy(SortField.Title))" Outline="true">
                        <Icon Name="@IconHelper.GetSortIcon(_fieldOrderDictionary[SortField.Title], SortField.Title)" />
                        Title
                    </Button>
                </div>
            </Content>
        </AccordionItem>
    </Accordion>
    <Grid @ref="_gameGrid"
          AllowFiltering="false"
          AllowPaging="true"
          Class="table table-hover table-bordered table-striped"
          Data="FilteredOrderedGames.ToGameRows()"
          GridSettingsChanged="OnGridUpdated"
          PageSize="@_pageSize"
          PageSizeSelectorVisible="false"
          PageSizeSelectorItems="@(new int[] { 4 })"
          PaginationItemsTextFormat="@_paginationText"
          Responsive="true"
          TItem="GameRow">
        <GridColumn TItem="GameRow" PropertyName="Game1" Filterable="false" Sortable="false" TextAlignment="Alignment.Center">
            <ChildContent>
                <GameCell Game="@context.Game1" Modal="@_modal" />
            </ChildContent>
        </GridColumn>
        <GridColumn TItem="GameRow" PropertyName="Game2" Filterable="false" Sortable="false" TextAlignment="Alignment.Center">
            <ChildContent>
                <GameCell Game="@context.Game2" Modal="@_modal" />
            </ChildContent>
        </GridColumn>
        <GridColumn TItem="GameRow" PropertyName="Game3" Filterable="false" Sortable="false" TextAlignment="Alignment.Center">
            <ChildContent>
                <GameCell Game="@context.Game3" Modal="@_modal" />
            </ChildContent>
        </GridColumn>
    </Grid>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> _authenticationStateTask { get; set; }

    private FilterProperties _filterProperties = new();
    private Grid<GameRow> _gameGrid;
    private Modal _modal;

    private bool _ascendingOrder;
    private Dictionary<SortField, bool> _fieldOrderDictionary;
    private Dictionary<string, Func<Game, bool>> _filterPredicates { get; set; }
    private bool _isAuthenticated;
    private bool _isInitializing;
    private Func<Game, object?> _orderSelector { get; set; }
    private int _pageSize;
    private string _paginationText;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateTask;
        _isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;
        var userName = authState?.User?.Identity?.Name;

        if (!_isAuthenticated || string.IsNullOrEmpty(userName))
        {
            return;
        }
        
        _fieldOrderDictionary = InitializeGridOrder();
        _ascendingOrder = true;
        _filterPredicates = new Dictionary<string, Func<Game, bool>>();
        _orderSelector = LinqHelper.TitleSelector;

        _isInitializing = true;
        PreloadService.Show();
        await GameLibraryManager.InitialiseProviders(userName);
        PreloadService.Hide();
        _isInitializing = false;

        _pageSize = 4;
        RefreshPaginationText(1, _pageSize, GameLibraryManager.Games.Count());
    }

    private IEnumerable<Game> FilteredOrderedGames
    {
        get
        {
            var filtered = GameLibraryManager.Games.Where(g => _filterPredicates.Any() ? _filterPredicates.All(p => p.Value(g)) : true);

            if (_ascendingOrder)
            {
                return filtered.OrderBy(_orderSelector);
            }
            else
            {
                return filtered.OrderByDescending(_orderSelector);
            }
        }
    }

    #region AutoComplete Data Providers

    private async Task<AutoCompleteDataProviderResult<Game>> GameFilterProvider(AutoCompleteDataProviderRequest<Game> request)
    {
        return await Task.FromResult(request.ApplyTo(GameLibraryManager.Games));
    }

    private async Task<AutoCompleteDataProviderResult<FilterableGenre>> GenreFilterProvider(AutoCompleteDataProviderRequest<FilterableGenre> request)
    {
        var genres = GameLibraryManager.Games.SelectMany(g => g.Genres)
            .Distinct()
            .OrderBy(g => g.ToString())
            .Select(g => new FilterableGenre { Name = g.ToString() })
            .ToList();

        return await Task.FromResult(new AutoCompleteDataProviderResult<FilterableGenre>
            {
                Data = genres,
                TotalCount = genres.Count()
            });
    }

    private async Task<AutoCompleteDataProviderResult<Publisher>> PublisherFilterProvider(AutoCompleteDataProviderRequest<Publisher> request)
    {
        var publishers = GameLibraryManager.Games.Where(g => g.Publisher != null)
            .Select(g => g.Publisher)
            .DistinctBy(p => p.Name)
            .OrderBy(p => p.Name);

        return await Task.FromResult(new AutoCompleteDataProviderResult<Publisher>
            {
                Data = publishers,
                TotalCount = publishers.Count()
            });
    }

    private async Task<AutoCompleteDataProviderResult<Studio>> StudioFilterProvider(AutoCompleteDataProviderRequest<Studio> request)
    {
        var studios = GameLibraryManager.Games.Where(g => g.Studio != null)
            .Select(g => g.Studio)
            .DistinctBy(s => s.Name)
            .OrderBy(s => s.Name);

        return await Task.FromResult(new AutoCompleteDataProviderResult<Studio>
            {
                Data = studios,
                TotalCount = studios.Count()
            });
    }

    #endregion

    # region Grid Ordering    

    private static Dictionary<SortField, bool> InitializeGridOrder()
    {
        return new Dictionary<SortField, bool>()
        {
            [SortField.AverageReview] = true,
            [SortField.LastPlayed] = true,
            [SortField.PlayTime] = true,
            [SortField.Publisher] = true,
            [SortField.ReleaseDate] = true,
            [SortField.StudioName] = true,
            [SortField.Title] = true
        };
    }

    private async Task OrderBy(SortField sortField)
    {
        _fieldOrderDictionary[sortField] = _fieldOrderDictionary.ContainsKey(sortField) ? !_fieldOrderDictionary[sortField] : false;
        _ascendingOrder = _fieldOrderDictionary[sortField];

        switch (sortField)
        {
            case SortField.AverageReview:
                _orderSelector = LinqHelper.AverageReviewSelector;
                break;
            case SortField.LastPlayed:
                _orderSelector = LinqHelper.LastPlayedSelector;
                break;
            case SortField.PlayTime:
                _orderSelector = LinqHelper.PlaytimeSelector;
                break;
            case SortField.Publisher:
                _orderSelector = LinqHelper.PublisherSelector;
                break;
            case SortField.ReleaseDate:
                _orderSelector = LinqHelper.ReleaseDateSelector;
                break;
            case SortField.StudioName:
                _orderSelector = LinqHelper.StudioSelector;
                break;
            case SortField.Title:
                _orderSelector = LinqHelper.TitleSelector;
                break;
        }
                
        // This should not be necessary, but somehow the grid data source is not being refreshed until after
        // the render event, meaning that otherwise the grid state will be at least one step behind where it should be.
        // So, we have to forcibly reset the data source to pick up changes to the collection order.
        // Not sure why this is only affecting changes to sort order and not filtering.

        #pragma warning disable BL0005
        _gameGrid.Data = FilteredOrderedGames.ToGameRows();
        #pragma warning restore BL0005

        await _gameGrid.RefreshDataAsync();
    }

    #endregion

    #region Grid Filtering 

    private DateOnly? ReleaseDateFilter
    {
        get => _filterProperties.ReleaseDate;
        set
        {
            _filterProperties.ReleaseDate = value;
            _filterPredicates[nameof(ReleaseDateFilter)] = LinqHelper.ReleaseDateFilter(value);
            _gameGrid.RefreshDataAsync();
        }
    }

    private DateTime? LastPlayedFilter
    {
        get => _filterProperties.LastPlayed;
        set
        {
            _filterProperties.LastPlayed = value;
            _filterPredicates[nameof(LastPlayedFilter)] = LinqHelper.LastPlayedFilter(value);
            _gameGrid.RefreshDataAsync();
        }
    }

    private int? LowerHoursFilter
    {
        get => _filterProperties.LowerHours;
        set
        {
            _filterProperties.LowerHours = value;
            _filterPredicates[nameof(LowerHoursFilter)] = LinqHelper.MinPlaytimeFilter(value.HasValue ? TimeSpan.FromHours(Convert.ToDouble(value)) : null);
            _gameGrid.RefreshDataAsync();
        }
    }

    private int? UpperHoursFilter
    {
        get => _filterProperties.UpperHours;
        set
        {
            _filterProperties.UpperHours = value;
            _filterPredicates[nameof(UpperHoursFilter)] = LinqHelper.MaxPlaytimeFilter(value.HasValue ? TimeSpan.FromHours(Convert.ToDouble(value)) : null);
            _gameGrid.RefreshDataAsync();
        }
    }

    private int? MinimumReviewScoreFilter
    {
        get => _filterProperties.MinimumReviewScore;
        set
        {
            _filterProperties.MinimumReviewScore = value;
            _filterPredicates[nameof(MinimumReviewScoreFilter)] = LinqHelper.ReviewScoreFilter(value);
            _gameGrid.RefreshDataAsync();
        }
    }

    private async Task GenreFilter(FilterableGenre genre)
    {
        _filterPredicates[nameof(GenreFilter)] = LinqHelper.GenreFilter(genre?.Name);
        await _gameGrid.RefreshDataAsync();
    }

    private async Task PublisherFilter(Publisher publisher)
    {
        _filterPredicates[nameof(StudioFilter)] = LinqHelper.PublisherFilter(publisher?.Name);
        await _gameGrid.RefreshDataAsync();
    }

    private async Task TitleFilter(Game game)
    {
        _filterPredicates[nameof(TitleFilter)] = LinqHelper.TitleFilter(game?.Title);
        await _gameGrid.RefreshDataAsync();
    }

    private async Task StudioFilter(Studio studio)
    {
        _filterPredicates[nameof(StudioFilter)] = LinqHelper.StudioFilter(studio?.Name);
        await _gameGrid.RefreshDataAsync();
    }

    #endregion    

    #region Grid State

    private async Task OnGridUpdated(GridSettings gridSettings)
    {
        RefreshPaginationText(gridSettings.PageNumber, gridSettings.PageSize, FilteredOrderedGames.Count());
    }

    private void RefreshPaginationText(int pageNumber, int pageSize, int gameCount)
    {
        int from = (pageNumber - 1) * (pageSize * 3) + 1;
        int to = pageNumber * (pageSize * 3);
        int total = gameCount;

        if (to > total)
        {
            to = total;
        }

        _pageSize = pageSize;
        _paginationText = $"{from} to {to} of {total} games";
    }

    #endregion
}