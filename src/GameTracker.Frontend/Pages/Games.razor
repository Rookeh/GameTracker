@page "/games";

<PageTitle>Games</PageTitle>

@using GameTracker.Frontend.Models;
@using GameTracker.Frontend.Pages.Components;
@using GameTracker.Interfaces;
@using GameTracker.Core;
@using GameTracker.Models;
@using MathNet.Numerics.Statistics;

@inject IProviderFactory ProviderFactory;
@inject NavigationManager NavigationManager;
@inject ToastService ToastService;

@if (games == null || !games.Any())
{
    <p><em>No games loaded. Please configure a game provider.</em></p>
}
else
{
    <Accordion>
        <AccordionItem>
            <TitleTemplate>
                <Icon Name="IconName.Search" Class="me-1" />Title Search
            </TitleTemplate>
            <Content>
                <AutoComplete @bind-Value="filterProperties.Name"
                              TItem="Game"
                              DataProvider="GameTitleProvider"
                              PropertyName="Title"
                              Placeholder="Search for a game title..." />
            </Content>
        </AccordionItem>
        <AccordionItem>
            <TitleTemplate>
                <Icon Name="IconName.Calendar" Class="me-1" /> Released Since...
            </TitleTemplate>
            <Content>
                <DateInput TValue="DateOnly?" @bind-Value="@filterProperties.Date" Placeholder="Released since..." />
            </Content>
        </AccordionItem>
        <AccordionItem>
            <TitleTemplate>
                <Icon Name="IconName.Hourglass" Class="me-1" /> Time Played...
            </TitleTemplate>
            <Content>
                <NumberInput TValue="int?" @bind-Value="@filterProperties.UpperHours" Placeholder="Upper bound (hours)"/>
                <NumberInput TValue="int?" @bind-Value="@filterProperties.LowerHours" Placeholder="Lower bound (hours)" />
            </Content>
        </AccordionItem>
        <AccordionItem>
            <TitleTemplate>
                <Icon Name="IconName.Star" Class="me-1" /> Minimum Review Score...
            </TitleTemplate>
            <Content>
                <NumberInput TValue="int?" @bind-Value="@filterProperties.MinimumReviewScore" Placeholder="Minimum score (%)"/>
            </Content>
        </AccordionItem>
    </Accordion>
    <Grid TItem="GameRow"
          Class="table table-hover table-bordered table-striped"
          Data="GameRows"
          AllowFiltering="false"
          AllowPaging="true"          
          PageSize="4"
          PageSizeSelectorVisible="true"
          PageSizeSelectorItems="@(new int[] { 4,8,16 })"
          PaginationItemsTextFormat="{0} - {1} of {2} rows"          
          Responsive="true">
        <GridColumn TItem="GameRow" PropertyName="Game1" Filterable="false" Sortable="false">
            <ChildContent>
                <GameCell Game="@context.Game1" />
            </ChildContent>
        </GridColumn>
        <GridColumn TItem="GameRow" PropertyName="Game2" Filterable="false" Sortable="false">
            <ChildContent>
                <GameCell Game="@context.Game2" />
            </ChildContent>
        </GridColumn>
        <GridColumn TItem="GameRow" PropertyName="Game3" Filterable="false" Sortable="false">
            <ChildContent>
                <GameCell Game="@context.Game3" />
            </ChildContent>
        </GridColumn>
    </Grid>
}

@code {

    private List<Game> games;
    private FilterProperties filterProperties = new();

    private async Task<AutoCompleteDataProviderResult<Game>> GameTitleProvider(AutoCompleteDataProviderRequest<Game> request)
    {
        return await Task.FromResult(request.ApplyTo(games));
    }

    private List<Game> FilteredGames
    {
        get
        {
            var filteredGames = new List<Game>(games);

            if (!string.IsNullOrEmpty(filterProperties.Name))
            {
                filteredGames = filteredGames.Where(g => g.Title.Contains(filterProperties.Name)).ToList();
            }

            if (filterProperties.Date != null)
            {
                var filterDateTime = new DateTime(filterProperties.Date.Value.Year, filterProperties.Date.Value.Month, filterProperties.Date.Value.Day);
                filteredGames = filteredGames.Where(g => g.ReleaseDate.HasValue && g.ReleaseDate.Value >= filterDateTime).ToList();
            }

            if (filterProperties.UpperHours != null && filterProperties.LowerHours != null)
            {
                var lower = TimeSpan.FromHours(filterProperties.LowerHours.Value);
                var upper = TimeSpan.FromHours(filterProperties.UpperHours.Value);
                filteredGames = filteredGames.Where(g => g.Playtime != null && g.Playtime >= lower && g.Playtime <= upper).ToList();
            }

            if (filterProperties.MinimumReviewScore != null)
            {
                filteredGames = filteredGames.Where(g => g.AverageCriticalReview.HasValue && g.AverageCriticalReview > filterProperties.MinimumReviewScore).ToList();
            }

            return filteredGames;
        }
    }

    private List<GameRow> GameRows
    {
        get
        {
            return FilteredGames.Chunk(3).Select(c => new GameRow
                {
                    Game1 = c[0],
                    Game2 = c.Length >= 2 ? c[1] : null,
                    Game3 = c.Length >= 3 ? c[2] : null
                }).ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        games = ProviderFactory.LoadProviders()
            .ToArray()
            .SelectMany(p => p.Games)
            .ToList();
    }
}