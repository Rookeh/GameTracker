@page "/gameproviders";

<PageTitle>Game Providers</PageTitle>

@using GameTracker.Data.Repositories;
@using GameTracker.Frontend.Helpers;
@using GameTracker.Frontend.Pages.Components
@using GameTracker.Interfaces;
@using GameTracker.Core;
@using GameTracker.Interfaces.Data;
@using GameTracker.Models;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ToastService ToastService;

@inject IGameLibraryManager GameLibraryManager;
@inject IGameProviderFactory ProviderFactory;
@inject IParameterCacheRepository ParameterCacheRepository;

@if (!isAuthenticated)
{
    <p><em>Unauthorized.</em></p>
}
else if (providers == null || !providers.Any())
{
    <p><em>Loading Providers...</em></p>
}
else
{
    <Grid TItem="IGameProvider"
          Class="table table-hover table-bordered table-striped"
          Data="providers"
          AllowFiltering="false"
          AllowPaging="false"
          PageSizeSelectorVisible="false"
          PageSizeSelectorItems="@(new int[] { })"
          PaginationItemsTextFormat="">
        <GridColumn TItem="IGameProvider" PropertyName="Platform">
            <HeaderContent>
                Platform
            </HeaderContent>
            <ChildContent>
                <div class="platform-container">
                    @if (string.IsNullOrEmpty(context.Platform.Icon))
                    {
                        @context.Platform.Name
                    }
                    else
                    {
                        <Icon Size="IconSize.x2" Name="@IconHelper.GetIconEnum(@context.Platform.Icon, IconName.Controller)" />
                    }                                       
                </div>
            </ChildContent>
        </GridColumn>
        <GridColumn TItem="IGameProvider" PropertyName="RequiredParameters">
            <HeaderContent>
                Required Parameters
            </HeaderContent>
            <ChildContent>
                <GameProviderParams GameProvider="@context"
                                    BoolParameters=@boolParameters
                                    DateParameters=@dateParameters
                                    StringParameters=@stringParameters
                                    IntParameters=@intParameters />
            </ChildContent>
        </GridColumn>
        <GridColumn TItem="IGameProvider" PropertyName="Refresh">
            <div class="btn-container">
                <Modal @ref="_providerModal" IsVerticallyCentered=true Size="ModalSize.Large" />
                <button class="btn btn-primary" onclick="@(async () => await LoadGames(context))">Load Games</button>
                <button class="btn btn-secondary" onclick="@(async () => await OnShowProviderModalClick(context))">More Info</button>
            </div>            
        </GridColumn>
    </Grid>
}

@code {
    private IGameProvider[]? providers;
    private Dictionary<string, bool> boolParameters;
    private Dictionary<string, DateTime> dateParameters;
    private Dictionary<string, string> stringParameters;
    private Dictionary<string, int> intParameters;

    private bool isAuthenticated;
    private Modal _providerModal;
    private string userName;    

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;

        if (!isAuthenticated)
        {
            return;
        }

        userName = authState?.User?.Identity?.Name ?? string.Empty;
        providers = ProviderFactory.GetProviders().ToArray();
        boolParameters = new Dictionary<string, bool>();
        dateParameters = new Dictionary<string, DateTime>();
        intParameters = new Dictionary<string, int>();
        stringParameters = new Dictionary<string, string>();

        foreach (var provider in providers)
        {
            var parameterCache = await ParameterCacheRepository.GetParameters(userName, provider.ProviderId);
            var existingParams = parameterCache?.Parameters;

            int paramIndex = 0;
            foreach (var providerArg in provider.RequiredParameters)
            {
                var existingValue = existingParams.Any() ? existingParams[paramIndex] : null;

                switch (providerArg.Value)
                {
                    case Type boolType when boolType == typeof(bool):
                        boolParameters[provider.Platform.Name + providerArg.Key] = existingValue != null ? bool.Parse(existingValue.ToString()) : default;
                        break;
                    case Type dateType when dateType == typeof(DateTime):
                        dateParameters[provider.Platform.Name + providerArg.Key] = existingValue != null ? DateTime.Parse(existingValue.ToString()) : default;
                        break;
                    case Type intType when intType == typeof(int):
                        intParameters[provider.Platform.Name + providerArg.Key] = existingValue != null ? Convert.ToInt32(existingValue) : default;
                        break;
                    case Type stringType when stringType == typeof(string):
                        stringParameters[provider.Platform.Name + providerArg.Key] = existingValue != null ? existingValue.ToString() : string.Empty;
                        break;
                }

                paramIndex++;
            }
        }
    }

    private async Task LoadGames(IGameProvider provider)
    {
        try
        {
            var providerArgValues = new List<object>();
            foreach (var arg in provider.RequiredParameters)
            {
                switch (arg.Value)
                {
                    case Type boolType when boolType == typeof(bool):
                        providerArgValues.Add(boolParameters[provider.Platform.Name + arg.Key]);
                        break;
                    case Type dateType when dateType == typeof(DateTime):
                        providerArgValues.Add(dateParameters[provider.Platform.Name + arg.Key]);
                        break;
                    case Type intType when intType == typeof(int):
                        providerArgValues.Add(intParameters[provider.Platform.Name + arg.Key]);
                        break;
                    case Type stringType when stringType == typeof(string):
                        providerArgValues.Add(stringParameters[provider.Platform.Name + arg.Key]);
                        break;
                }
            }

            if (provider.RequiredParameters.Any() && (!providerArgValues.Any() || providerArgValues.Any(pa => pa == null)))
            {
                ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Warning,
                    Message = $"Cannot load games for provider {provider.Platform.Name}: Required information missing.",
                });
            }
            else
            {
                ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Info,
                    Message = $"Refreshing games for provider {provider.Platform.Name}...",
                });

                await GameLibraryManager.RefreshProvider(userName, provider.ProviderId, providerArgValues.ToArray());

                ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Success,
                    Message = $"Successfully loaded {provider.Games.Count()} games from provider {provider.Platform.Name}.",
                });
            }
        }
        catch (Exception e)
        {
            ToastService.Notify(new ToastMessage
            {
                Type = ToastType.Danger,
                Message = $"Failed to load games for provider {provider.Platform.Name}: {e.Message}",
            });
        }
    }

    private async Task OnShowProviderModalClick(IGameProvider provider)
    {
        var modalParams = new Dictionary<string, object>();
        modalParams.Add("Provider", provider.Platform);
        await _providerModal.ShowAsync<ProviderModal>(title: provider.Platform.Name, parameters: modalParams);
    }
}