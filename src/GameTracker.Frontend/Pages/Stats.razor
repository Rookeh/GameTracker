@page "/stats";

@using BlazorBootstrap.Extensions
@using Color = System.Drawing.Color
@using GameTracker.Frontend.Helpers;
@using GameTracker.Interfaces;
@using GameTracker.Models.Enums;

@inject IGameLibraryManager GameLibraryManager;
@inject PreloadService PreloadService;

@if (!_isAuthenticated)
{
    <p><em>Unauthorized.</em></p>
}
else if (_isInitializing)
{
}
else if (GameLibraryManager.Games == null || !GameLibraryManager.Games.Any())
{
    <p><em>No games loaded. Please configure a game provider.</em></p>
}
else
{
    <Accordion>
        <AccordionItem>
            <TitleTemplate>
                <Icon Name="IconName.ClockHistory" Class="me-1" /> Time Played
            </TitleTemplate>
            <Content>
                <table>
                    <tr>
                        <td>
                            <div>
                                <span class="chart-label"><h3>Played vs Unplayed</h3></span>
                                <DoughnutChart @ref="_playedUnplayedChart" Width="400" Class="mb-4" />                                
                            </div>
                        </td>
                        <td>
                            <div>
                                <span class="chart-label"><h3>Hours Played</h3></span>
                                <DoughnutChart @ref="_hoursPlayedChart" Width="400" Class="mb-4" />                                
                            </div>
                        </td>
                    </tr>
                </table>
            </Content>
        </AccordionItem>
        <AccordionItem>
            <TitleTemplate>
                <Icon Name="IconName.Controller" Class="me-1" /> Library Breakdown
            </TitleTemplate>
            <Content>
                <table>
                    <tr>
                        <td>
                            <span class="chart-label"><h3>By Genre</h3></span>
                            <div>
                                <DoughnutChart @ref="_genreChart" Width="400" Class="mb-4" />
                            </div>                            
                        </td>
                        <td>
                            <span class="chart-label"><h3>By Multiplayer Type</h3></span>
                            <div>
                                <DoughnutChart @ref="_multiPlayerChart" Width="400" Class="mb-4" />
                            </div>                            
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <span class="chart-label"><h3>By Platform</h3></span>
                            <div>
                                <DoughnutChart @ref="_platformChart" Width="400" Class="mb-4" />
                            </div>                            
                        </td>
                        <td>
                            <span class="chart-label"><h3>By Storefront</h3></span>
                            <div>
                                <DoughnutChart @ref="_storeFrontChart" Width="400" Class="mb-4" />
                            </div>                            
                        </td>
                    </tr>
                </table>
            </Content>
        </AccordionItem>
    </Accordion>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> _authenticationStateTask { get; set; }

    private ChartData _playedUnplayedData = new ChartData();
    private DoughnutChart _playedUnplayedChart = new DoughnutChart();

    private ChartData _hoursPlayedData = new ChartData();
    private DoughnutChart _hoursPlayedChart = new DoughnutChart();

    private ChartData _platformData = new ChartData();
    private DoughnutChart _platformChart = new DoughnutChart();

    private ChartData _genreData = new ChartData();
    private DoughnutChart _genreChart = new DoughnutChart();

    private ChartData _multiPlayerData = new ChartData();
    private DoughnutChart _multiPlayerChart = new DoughnutChart();

    private ChartData _storeFrontData = new ChartData();
    private DoughnutChart _storeFrontChart = new DoughnutChart();

    private DoughnutChartOptions _doughnutChartOptions = new DoughnutChartOptions();
    private bool _isAuthenticated;
    private bool _isInitializing;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateTask;
        _isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;
        var userName = authState?.User?.Identity?.Name;

        if (!_isAuthenticated || string.IsNullOrEmpty(userName))
        {
            return;
        }

        _isInitializing = true;
        PreloadService.Show();
        await GameLibraryManager.InitialiseProviders(userName);
        PreloadService.Hide();
        _isInitializing = false;

        _doughnutChartOptions = new DoughnutChartOptions
            {
                Responsive = true,
            };

        SetupGenreChart();
        SetupHoursPlayedChart();
        SetupMultiplayerChart();
        SetupPlatformChart();
        SetupPlayedUnplayedChart();
        SetupStoreFrontChart();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && GameLibraryManager.Games.Any())
        {
            await _genreChart.InitializeAsync(_genreData, _doughnutChartOptions);
            await _hoursPlayedChart.InitializeAsync(_hoursPlayedData, _doughnutChartOptions);
            await _multiPlayerChart.InitializeAsync(_multiPlayerData, _doughnutChartOptions);
            await _platformChart.InitializeAsync(_platformData, _doughnutChartOptions);
            await _playedUnplayedChart.InitializeAsync(_playedUnplayedData, _doughnutChartOptions);
            await _storeFrontChart.InitializeAsync(_storeFrontData, _doughnutChartOptions);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void SetupGenreChart()
    {
        var grouped = GameLibraryManager.Games.SelectMany(game => game.Genres.Select(genre => new { game, genre }))
                                              .GroupBy(x => x.genre)
                                              .Select(group => new { Genre = group.Key, Games = group.Select(g => g.game).ToList() });

        var chartDataSet = new DoughnutChartDataset()
            {
                Data = grouped.Select(g => Convert.ToDouble(g.Games.Count())).ToList(),
                BackgroundColor = grouped.Select(g => ColourHelper.GetRandomColour().ToRgbString()).ToList()
            };

        _genreData = new ChartData()
            {
                Labels = grouped.Select(g => g.Genre.ToString()).ToList(),
                Datasets = new List<IChartDataset>() { chartDataSet }
            };
    }

    private void SetupHoursPlayedChart()
    {
        var chartDataSet = new DoughnutChartDataset()
            {
                Data = new List<double>
            {
                GameLibraryManager.Games.Count(g => g.Playtime == null),
                GameLibraryManager.Games.Count(g => g.Playtime != null && g.Playtime == TimeSpan.Zero),
                GameLibraryManager.Games.Count(g => g.Playtime != null && g.Playtime > TimeSpan.Zero && g.Playtime <= TimeSpan.FromHours(10)),
                GameLibraryManager.Games.Count(g => g.Playtime != null && g.Playtime > TimeSpan.FromHours(10) && g.Playtime <= TimeSpan.FromHours(50)),
                GameLibraryManager.Games.Count(g => g.Playtime != null && g.Playtime > TimeSpan.FromHours(50) && g.Playtime <= TimeSpan.FromHours(100)),
                GameLibraryManager.Games.Count(g => g.Playtime != null && g.Playtime > TimeSpan.FromHours(100) && g.Playtime <= TimeSpan.FromHours(250)),
                GameLibraryManager.Games.Count(g => g.Playtime != null && g.Playtime > TimeSpan.FromHours(250)),
            },
                BackgroundColor = new List<string>
            {
                ColourHelper.ChartColours.Neutral.ToRgbString(),
                ColourHelper.GetRandomColour().ToRgbString(),
                ColourHelper.GetRandomColour().ToRgbString(),
                ColourHelper.GetRandomColour().ToRgbString(),
                ColourHelper.GetRandomColour().ToRgbString(),
                ColourHelper.GetRandomColour().ToRgbString(),
                ColourHelper.GetRandomColour().ToRgbString()
            }
            };

        _hoursPlayedData = new ChartData()
            {
                Labels = new List<string>
            {
                "No data",
                "Never played",
                "> 0 to 10 hours",
                "> 10 to 50 hours",
                "> 50 to 100 hours",
                "> 100 to 250 hours",
                "250+ hours"
            },
                Datasets = new List<IChartDataset>() { chartDataSet }
            };
    }

    private void SetupMultiplayerChart()
    {
        var grouped = GameLibraryManager.Games.SelectMany(game => game.MultiplayerAvailability.Select(multiplayer => new { game, multiplayer }))
                                              .GroupBy(x => x.multiplayer)
                                              .Select(group => new { Multiplayer = group.Key, Games = group.Select(g => g.game).ToList() });

        var chartDataSet = new DoughnutChartDataset()
            {
                Data = grouped.Select(g => Convert.ToDouble(g.Games.Count())).ToList(),
                BackgroundColor = grouped.Select(g => ColourHelper.GetRandomColour().ToRgbString()).ToList()
            };

        _multiPlayerData = new ChartData()
            {
                Labels = grouped.Select(g => g.Multiplayer.ToString()).ToList(),
                Datasets = new List<IChartDataset>() { chartDataSet }
            };
    }

    private void SetupPlatformChart()
    {
        var grouped = GameLibraryManager.Games.SelectMany(game => game.Platforms.Select(platform => new { game, platformName = platform.Name }))
                                              .GroupBy(x => x.platformName)
                                              .Select(group => new { Platform = group.Key, Games = group.Select(g => g.game).ToList() });

        var chartDataSet = new DoughnutChartDataset()
            {
                Data = grouped.Select(g => Convert.ToDouble(g.Games.Count())).ToList(),
                BackgroundColor = grouped.Select(g => ColourHelper.GetRandomColour().ToRgbString()).ToList()
            };

        _platformData = new ChartData()
            {
                Labels = grouped.Select(g => g.Platform).ToList(),
                Datasets = new List<IChartDataset>() { chartDataSet }
            };
    }

    private void SetupPlayedUnplayedChart()
    {
        var chartDataSet = new DoughnutChartDataset()
            {
                Data = new List<double>
            {
                GameLibraryManager.Games.Count(g => g.Playtime == null && g.LastPlayed == null),
                GameLibraryManager.Games.Count(g => g.Playtime != null && g.Playtime == TimeSpan.Zero),
                GameLibraryManager.Games.Count(g => (g.Playtime != null && g.Playtime > TimeSpan.Zero) || (g.Playtime == null && g.LastPlayed != null))
            },
                BackgroundColor = new List<string>
            {
                ColourHelper.ChartColours.Neutral.ToRgbString(),
                ColourHelper.GetRandomColour().ToRgbString(),
                ColourHelper.GetRandomColour().ToRgbString()
            }
            };

        _playedUnplayedData = new ChartData()
            {
                Labels = new List<string> { "No data", "Unplayed", "Played" },
                Datasets = new List<IChartDataset>() { chartDataSet }
            };
    }

    private void SetupStoreFrontChart()
    {
        var grouped = GameLibraryManager.Games.GroupBy(g => g.StorefrontName);

        var chartDataSet = new DoughnutChartDataset()
            {
                Data = grouped.Select(g => Convert.ToDouble(g.Count())).ToList(),
                BackgroundColor = grouped.Select(g => ColourHelper.GetRandomColour().ToRgbString()).ToList()
            };

        _storeFrontData = new ChartData()
            {
                Labels = grouped.Select(g => g.Key).ToList(),
                Datasets = new List<IChartDataset>() { chartDataSet }
            };
    }
}