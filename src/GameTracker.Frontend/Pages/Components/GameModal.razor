@using GameTracker.Models;
@using GameTracker.Models.BaseClasses;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;

<div class="modal-content">
    <div class="game-details">
        <div class="modal-body">
            <div class="header">
                <img src="@Game.Image" width="460" height="215" alt="Header Art">
            </div>
            <div class="info">
                <h2 class="title">@Game.Title</h2>
                <div class="rating">
                    <span class="label">Average Rating:</span>
                    <span class="value">@GetAverageRating()</span>
                </div>
                <div class="publisher">
                    <span class="label">Publisher:</span>
                    <span class="value">@GetName(Game.Publisher)</span>
                </div>
                <div class="studio">
                    <span class="label">Development Studio:</span>
                    <span class="value">@GetName(Game.Studio)</span>
                </div>
                <div class="synopsis">
                    <span class="label">Synopsis:</span>
                    <span class="value">@Game.Description</span>
                </div>
                <Button Color="ButtonColor.Primary" @onclick="OnLaunchGameClick">
                    <Icon Name="@GetIconEnum(@Game.LaunchCommand.Icon)"/>
                    @Game.LaunchCommand.Text
                </Button>
            </div>
        </div>        
    </div>
</div>


@code {
    [Parameter] public Game Game { get; set; }

    private IconName GetIconEnum(string iconName)
    {
        return Enum.Parse<IconName>(iconName);
    }

    private float GetAverageRating()
    {
        if (Game.Reviews == null || !Game.Reviews.Any())
        {
            return 0;
        }

        return Game.Reviews.Select(r => r.Score).Average();
    }

    private string GetName(CorporateEntity entity)
    {
        return entity != null ? entity.Name : "Unknown";
    }

    private async Task OnLaunchGameClick()
    {
        if (Game.LaunchCommand.NewTab)
        {
            await JSRuntime.InvokeVoidAsync("open", Game.LaunchCommand.Uri, "_blank");
        }
        else
        {
            NavigationManager.NavigateTo(Game.LaunchCommand.Uri);
        }        
    }
}