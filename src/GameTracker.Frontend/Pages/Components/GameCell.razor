@using GameTracker.Models;

@if (GameGroup != null)
{
    @if (_canShowGameDetails)
    {
        <Modal @ref="_modal" IsVerticallyCentered=true Size="ModalSize.Large" />
        <img height="@_gameImage.Height" width="@_gameImage.Width" src="@_gameImage.Url" alt="@_gameTitle" @onclick="@(e => OnShowGameModalClick(GameGroup))" />
    }
    else
    {
        <div class="cell-loading">
            <div class="spinner-border" role="status">
                <span class="sr-only" />
            </div>
        </div>
    }
}

@code {

    [Parameter]
    public IGrouping<string, Game> GameGroup { get; set; }

    private bool _canShowGameDetails = false;
    private Image _gameImage;
    private Modal _modal;
    private string _gameTitle;

    protected override async Task OnParametersSetAsync()
    {
        if (GameGroup != null)
        {
            _canShowGameDetails = false;

            foreach(var game in GameGroup)
            {
                await game.Preload();
            }

            _gameImage = GameGroup.OrderByDescending(gg => gg.ReleaseDate ?? DateTime.MinValue).FirstOrDefault(gg => gg.Image != null)?.Image;
            _gameTitle = GameGroup.Key;

            _canShowGameDetails = true;
        }
    }

    private async Task OnShowGameModalClick(IGrouping<string, Game> gameGroup)
    {
        var modalParams = new Dictionary<string, object>();
        modalParams.Add("GameGroup", gameGroup);
        await _modal.ShowAsync<GameModal>(title: gameGroup.Key, parameters: modalParams);
    }
}
